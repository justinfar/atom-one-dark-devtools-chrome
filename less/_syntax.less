// ==========================================================================
// Global Syntax
// ==========================================================================

// All code text that doesn't have a specific class
::shadow .CodeMirror-code,
.CodeMirror-code {
	color: @global-text;
}

// ==========================================================================
//  Syntax For Sources Panel
// ==========================================================================

// Javascript
// ==========================================================================

// Wrap in mixin for re-use
.syntax-js() {
	.cm-js-atom { color: @js-atom !important; }
	.cm-js-attribute { color: @js-attribute !important; }
	.cm-js-builtin { color: @js-builtin !important; }
	.cm-js-comment { color: @js-comment !important; font-style: italic; }
	.cm-js-def { color: @js-def !important; }
	.cm-js-error { background: @js-error !important; color: @global-text !important; }
	.cm-js-header { color: @js-header !important; }
	.cm-js-hr { color: @js-hr !important; }
	.cm-js-keyword { color: @js-keyword !important; font-style: italic; }
	.cm-js-link { color: @js-link !important; }
	.cm-js-meta { color: @js-meta !important; }
	.cm-js-number { color: @js-number !important; }
	.cm-js-operator { color: @js-operator !important;}
	.cm-js-property { color: @js-property !important; }
	.cm-js-string { color: @js-string !important; }
	.cm-js-string-2 { color: @js-obj-regexp !important; }
	.cm-js-tag { color: @js-tag !important; }
	.cm-js-variable { color: @js-variable !important; }
	.cm-js-variable-2 { color: @js-variable-2 !important; }

	// overqualify because devtools authors are using !important
	.CodeMirror {
		.cm-js-string { color: @js-string !important; }
		.cm-js-string-2 { color: @js-obj-regexp !important; }
		.cm-js-comment { color: @js-comment !important; font-style: italic; }
	}
}

.source-frame-eval-expression{ background-color: @selection-background !important; border-color: @selection-border !important;}


// Coffeescript
// ==========================================================================
.cm-atom { .cm-js-atom }
.cm-comment { .cm-js-comment }
.cm-variable { .cm-js-variable }
.cm-string { .cm-js-string }
.cm-keyword { .cm-js-keyword }
.cm-number { .cm-js-number }
.cm-operator { .cm-js-operator }
.cm-error { .cm-js-error}
.cm-s-default .cm-property { .cm-js-variable }

// CSS
// ==========================================================================

// Wrap in mixin for re-use
.syntax-css() {
	.cm-css-atom { color: @css-atom !important; }
	.cm-css-builtin { color: @css-builtin !important; }
	.cm-css-def { color: @css-def !important; }
	.cm-css-comment { color: @css-comment !important; font-style: italic; }
	.cm-css-meta { color: @css-meta !important;}
	.cm-css-number { color: @css-number !important; }
	.cm-css-operator { color: @css-operator !important; }
	.cm-css-property { color: @css-property !important;}
	.cm-css-qualifier { color: @css-qualifier !important; }
	.cm-css-string { color: @css-string !important;}
	.cm-css-string-2 { color: @css-string-2 !important; }
	.cm-css-tag { color: @css-tag !important; }
	.cm-css-variable { color: @css-variable !important; }
	.cm-css-variable-2 { color: @css-variable-2 !important; }

	.webkit-css-selector { color: @css-def !important; }
	.webkit-css-at-rule { color: @css-at-rule !important; }
	.webkit-css-color { color: @css-def !important; }
	.webkit-css-comment { color: @css-comment !important; }
	.webkit-css-important { color: @css-important !important; }
	.webkit-css-keyword { color: @css-def !important; }
	.webkit-css-number { color: @css-number !important; }
	.webkit-css-property { color: @css-property !important; }
	.webkit-css-string { color: @css-string !important; }
	.webkit-css-url { color: @xml-link !important; }

	// overqualify because devtools authors are using !important
	.CodeMirror {
		.cm-css-comment { color: @css-comment !important; font-style: italic; }
		.cm-css-string { color: @css-string !important;}
	}
}

// HTML
// ==========================================================================

// Wrap in mixing for re-use
.syntax-html() {
	.cm-xml-comment { color: @xml-comment !important; font-style: italic !important; }
	.cm-xml-error { color: @xml-error  !important; }
	.cm-xml-string { color: @xml-string !important; }
	.cm-xml-tag { color: @xml-tag !important; }
	.cm-xml-attribute { color: @xml-attribute !important; }
	.cm-xml-link { color: @xml-link !important; }

	.webkit-html-attribute-name { color: @xml-attribute !important;}
	.webkit-html-attribute-value { color: @xml-string !important;}
	.webkit-html-comment { color: @xml-comment !important;font-style:italic;}
	.webkit-html-resource-link,
	.webkit-html-external-link { color: @xml-link !important;}
	.webkit-html-tag,
	.webkit-html-tag-name,
	.webkit-html-close-tag-name { color: @xml-tag !important;}
	.webkit-html-text-node,
	.webkit-html-css-node,
	.webkit-html-js-node { color: @xml-js-node !important;}
	.webkit-html-pseudo-element { color: @xml-pseudo !important;}
}


// Output syntax mixins.
.syntax-js();
.syntax-css();
.syntax-html();


// ==========================================================================


::shadow .webkit-html-fragment { color: @xml-shadow-root !important; }
::shadow .highlight { color: @xml-iframe-root !important; }




// ==========================================================================
// Syntax for Elements Panel & Console
// ==========================================================================
::shadow {

	// HTML
	// ==========================================================================


	// JS & CSS use codemirror selectors and html for the inline edits
	.syntax-js();
	.syntax-css();
	.syntax-html();

	// CSS
	// ==========================================================================


	// // Javascript
	// // ==========================================================================
	// .section .properties .name,
	// .event-properties .name,
	// .console-formatted-object .name { color: @js-obj-name !important; }
	// .console-formatted-object,
	// .console-formatted-array { color: @js-obj-array !important; }
	// .console-formatted-function { color: @js-obj-function !important; }
	// .console-formatted-number { color: @js-obj-number !important; }
	// .console-formatted-boolean { color: @js-obj-boolean !important; }
	// .console-object-preview { color: @js-obj-preview !important; }
	// .console-formatted-regexp { color: @js-obj-regexp !important; }
	// .console-formatted-string { color: @js-obj-string !important; }
	// .console-formatted-undefined { color: @js-obj-undefined !important; }
	// .json .title { color: @global-text !important;}
	// .json .separator { color: darken(@global-text, 35%) !important;}
}


.popover .parent + .children.expanded,
#console-messages .parent + .children.expanded,
.sidebar-pane .parent:not(.event-category) + .children.expanded {
	border-left: 1px dashed fade(@global-text, 20%) !important;
	position: relative;
	left: 4.4px;
}

// Overqualify selector because devtools is using !important
.monospace,
.CodeMirror-line {
	::shadow {
		.object-value-string { color: @js-obj-string !important; }
		.object-value-regexp { color: @js-obj-regexp !important; }
		.object-value-symbol { color: @js-obj-regexp !important; }
	}
	.cm-xml-comment { color: @xml-comment !important; }
	.cm-xml-string { color: @xml-string !important; }
}

// Console syntax overrides
#console-messages {
	.cm-js-string { color: @js-string !important; }
	.cm-js-string-2 { color: @js-obj-regexp !important; }
	.object-value-function-prefix { color: @js-obj-function !important; }
}

::shadow {
	.object-value-function-prefix { color: @js-obj-function !important; }
}

::shadow ::shadow .webkit-html-external-link,
::shadow ::shadow .webkit-html-resource-link {
	color: @global-link !important;
}

.devtools-link,
::shadow .devtools-link {
	color: @global-link !important;
}
